#! /usr/bin/env python

""" Utility for adding new files to a c++ project. """

import sys
import os
from datetime import datetime

GUARD_DIRECTIVES = ["#ifndef", "#define"]


def include_guards(file_name):
    file_name = file_name.split(".")[0].upper()
    return "\n".join([f"{directive} __{file_name}__" for directive in GUARD_DIRECTIVES])


class IncludeGuard:
    def __init__(self, file):
        self.fp = file
        _, self.name = os.path.split(file.name)

    def __enter__(self):
        print(
            include_guards(self.name),
            file=self.fp,
        )
        return self

    def __exit__(self, *args):
        print(
            "#endif",
            file=self.fp,
        )


header_template = f"""/*
    Author: Jordan Cottle
    Created: {datetime.now().strftime("%m/%d/%Y")}
*/
"""


def header_core(struct_name, base):
    if base == "printable"
        header = "misc.h"
    else:
        header = base.lower() + ".h"

    return f"""
#include "{header}"

struct {struct_name} : {base}{{

    {struct_name}();

    std::string __str__();
}};
"""


new_file = sys.argv[1]

try:
    base = sys.argv[2]
except IndexError:
    base = "printable"

for file in new_files:
    *directory, name = file.split("/")

    directory = os.path.join(*directory)
    directory = os.path.abspath(directory)

    if directory:
        os.makedirs(directory, exist_ok=True)

    header_name = f"{file}.h"
    _, header_tag = os.path.split(header_name)
    struct_name = "".join(
        word.capitalize() for word in header_tag.split(".")[0].split("_")
    )
    with open(header_name, "w") as header_file:
        print(header_template, file=header_file)
        with IncludeGuard(header_file):
            print(header_core(struct_name), file=header_file)

    with open(f"{file}.cpp", "w") as cpp_file:
        print(header_template, file=cpp_file)

        print(f'#include "{header_tag}"', file=cpp_file)